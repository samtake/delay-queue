// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8e, 0xcd, 0x4a, 0xc7, 0x30,
	0x10, 0xc4, 0xc1, 0xbf, 0x94, 0xb2, 0x52, 0x84, 0x1c, 0x3c, 0x54, 0x10, 0x9f, 0x20, 0x85, 0x7a,
	0xf4, 0x54, 0x3f, 0xf0, 0x6c, 0xf5, 0x05, 0x92, 0x66, 0x2c, 0xa5, 0xa9, 0x89, 0x4d, 0x5a, 0xe8,
	0xc9, 0x57, 0x97, 0x6d, 0xaa, 0x47, 0x6f, 0x33, 0xbf, 0x9d, 0x59, 0x86, 0x8a, 0x80, 0x79, 0x1d,
	0x3a, 0x48, 0x3f, 0xbb, 0xe8, 0xc4, 0x99, 0xd7, 0x65, 0x31, 0x21, 0x04, 0xd5, 0x1f, 0xa8, 0xa4,
	0xa8, 0xc2, 0x78, 0xe8, 0xeb, 0xde, 0xb9, 0xde, 0xa2, 0xda, 0x9d, 0x5e, 0x3e, 0x2a, 0x4c, 0x3e,
	0x6e, 0xe9, 0x58, 0x7f, 0x13, 0x3d, 0xc1, 0xaa, 0xed, 0x75, 0xc1, 0x02, 0x71, 0x43, 0xa7, 0xc6,
	0x18, 0x41, 0xd2, 0x6b, 0xd9, 0x18, 0xd3, 0xe2, 0xab, 0xbc, 0xf8, 0xd3, 0xc1, 0x8b, 0x5b, 0x3a,
	0xbd, 0x20, 0x8a, 0x4b, 0x66, 0x2d, 0xe2, 0x3c, 0x60, 0x05, 0x87, 0x72, 0x06, 0xef, 0x2a, 0x8c,
	0xa2, 0xa2, 0xac, 0xc5, 0xe4, 0x56, 0x88, 0x22, 0x85, 0x58, 0x73, 0xe4, 0x4a, 0xa6, 0x19, 0xf2,
	0x77, 0x86, 0x7c, 0xe6, 0x19, 0xf5, 0x3d, 0xe5, 0x8f, 0xca, 0x5a, 0xad, 0x3a, 0x2e, 0x9f, 0xbf,
	0xe1, 0xd3, 0xa4, 0xff, 0x4c, 0x1f, 0x54, 0x37, 0xfe, 0x53, 0xd6, 0xd9, 0xee, 0xef, 0x7e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x07, 0xcf, 0x05, 0xc3, 0x11, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DelayQueueClient is the client API for DelayQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DelayQueueClient interface {
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
	Get(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*Task, error)
	Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type delayQueueClient struct {
	cc *grpc.ClientConn
}

func NewDelayQueueClient(cc *grpc.ClientConn) DelayQueueClient {
	return &delayQueueClient{cc}
}

func (c *delayQueueClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := c.cc.Invoke(ctx, "/pb.DelayQueue/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delayQueueClient) Get(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/pb.DelayQueue/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delayQueueClient) Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.DelayQueue/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DelayQueueServer is the server API for DelayQueue service.
type DelayQueueServer interface {
	Add(context.Context, *AddReq) (*AddResp, error)
	Get(context.Context, *RetrieveReq) (*Task, error)
	Remove(context.Context, *RemoveReq) (*empty.Empty, error)
}

// UnimplementedDelayQueueServer can be embedded to have forward compatible implementations.
type UnimplementedDelayQueueServer struct {
}

func (*UnimplementedDelayQueueServer) Add(ctx context.Context, req *AddReq) (*AddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedDelayQueueServer) Get(ctx context.Context, req *RetrieveReq) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDelayQueueServer) Remove(ctx context.Context, req *RemoveReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}

func RegisterDelayQueueServer(s *grpc.Server, srv DelayQueueServer) {
	s.RegisterService(&_DelayQueue_serviceDesc, srv)
}

func _DelayQueue_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelayQueueServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DelayQueue/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelayQueueServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelayQueue_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelayQueueServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DelayQueue/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelayQueueServer).Get(ctx, req.(*RetrieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelayQueue_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelayQueueServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DelayQueue/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelayQueueServer).Remove(ctx, req.(*RemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DelayQueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DelayQueue",
	HandlerType: (*DelayQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DelayQueue_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DelayQueue_Get_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DelayQueue_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// CallbackClient is the client API for Callback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CallbackClient interface {
	Send(ctx context.Context, in *CallBackReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type callbackClient struct {
	cc *grpc.ClientConn
}

func NewCallbackClient(cc *grpc.ClientConn) CallbackClient {
	return &callbackClient{cc}
}

func (c *callbackClient) Send(ctx context.Context, in *CallBackReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.Callback/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallbackServer is the server API for Callback service.
type CallbackServer interface {
	Send(context.Context, *CallBackReq) (*empty.Empty, error)
}

// UnimplementedCallbackServer can be embedded to have forward compatible implementations.
type UnimplementedCallbackServer struct {
}

func (*UnimplementedCallbackServer) Send(ctx context.Context, req *CallBackReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterCallbackServer(s *grpc.Server, srv CallbackServer) {
	s.RegisterService(&_Callback_serviceDesc, srv)
}

func _Callback_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Callback/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServer).Send(ctx, req.(*CallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Callback_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Callback",
	HandlerType: (*CallbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Callback_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
